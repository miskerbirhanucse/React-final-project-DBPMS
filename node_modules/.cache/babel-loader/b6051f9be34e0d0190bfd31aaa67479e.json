{"ast":null,"code":"import * as ActionTypes from '../ActionTypes';\nimport { RegisterUserService, LoginUserService } from '../../services/AuthService';\nexport const RegisterAction = credentials => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    });\n    RegisterUserService(credentials).then(res => {\n      console.log(ares);\n\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.SIGNUP_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.SIGNUP_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c = RegisterAction;\nexport const LoginAction = (credentials, history) => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    });\n    LoginUserService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        localStorage.setItem('access-token', res.token);\n        dispatch({\n          type: ActionTypes.LOGIN_SUCCESS\n        }); // history.push('/user');\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.LOGIN_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c2 = LoginAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegisterAction\");\n$RefreshReg$(_c2, \"LoginAction\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/react/finalproject/src/redux/actions/AuthActions.js"],"names":["ActionTypes","RegisterUserService","LoginUserService","RegisterAction","credentials","dispatch","type","RESTART_AUTH_RESPONSE","LOADING","then","res","console","log","ares","hasOwnProperty","success","SIGNUP_SUCCESS","SIGNUP_ERROR","error","CODE_ERROR","LoginAction","history","localStorage","setItem","token","LOGIN_SUCCESS","LOGIN_ERROR"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAuD,4BAAvD;AAEA,OAAO,MAAMC,cAAc,GAAIC,WAAD,IAAiB;AAC3C,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,WAAW,CAACO;AAApB,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,WAAW,CAACQ;AAApB,KAAD,CAAR;AACAP,IAAAA,mBAAmB,CAACG,WAAD,CAAnB,CAAiCK,IAAjC,CAAuCC,GAAD,IAAS;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;;AACA,UAAIH,GAAG,CAACI,cAAJ,CAAmB,SAAnB,KAAiCJ,GAAG,CAACK,OAAJ,KAAgB,IAArD,EAA2D;AACvDV,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEN,WAAW,CAACgB,cAApB;AAAoCN,UAAAA;AAApC,SAAD,CAAR;AACH,OAFD,MAEO,IAAIA,GAAG,CAACI,cAAJ,CAAmB,SAAnB,KAAiCJ,GAAG,CAACK,OAAJ,KAAgB,KAArD,EAA4D;AAC/DV,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEN,WAAW,CAACiB,YAApB;AAAkCP,UAAAA;AAAlC,SAAD,CAAR;AACH;AACJ,KAPD,EAOGQ,KAAK,IAAI;AACRb,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN,WAAW,CAACmB,UAApB;AAAgCD,QAAAA;AAAhC,OAAD,CAAR;AACH,KATD;AAUH,GAbD;AAcH,CAfM;KAAMf,c;AAiBb,OAAO,MAAMiB,WAAW,GAAG,CAAChB,WAAD,EAAciB,OAAd,KAA0B;AACjD,SAAQhB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,WAAW,CAACO;AAApB,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,WAAW,CAACQ;AAApB,KAAD,CAAR;AACAN,IAAAA,gBAAgB,CAACE,WAAD,CAAhB,CAA8BK,IAA9B,CAAoCC,GAAD,IAAS;AACxC,UAAIA,GAAG,CAACI,cAAJ,CAAmB,SAAnB,KAAiCJ,GAAG,CAACK,OAAJ,KAAgB,IAArD,EAA2D;AACvDO,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCb,GAAG,CAACc,KAAzC;AACAnB,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEN,WAAW,CAACyB;AAApB,SAAD,CAAR,CAFuD,CAGvD;AACH,OAJD,MAIO,IAAIf,GAAG,CAACI,cAAJ,CAAmB,SAAnB,KAAiCJ,GAAG,CAACK,OAAJ,KAAgB,KAArD,EAA4D;AAC/DV,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAEN,WAAW,CAAC0B,WAApB;AAAiChB,UAAAA;AAAjC,SAAD,CAAR;AACH;AACJ,KARD,EAQGQ,KAAK,IAAI;AACRb,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN,WAAW,CAACmB,UAApB;AAAgCD,QAAAA;AAAhC,OAAD,CAAR;AACH,KAVD;AAWH,GAdD;AAeH,CAhBM;MAAME,W","sourcesContent":["import * as ActionTypes from '../ActionTypes';\r\nimport { RegisterUserService, LoginUserService, } from '../../services/AuthService';\r\n\r\nexport const RegisterAction = (credentials) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: ActionTypes.RESTART_AUTH_RESPONSE });\r\n        dispatch({ type: ActionTypes.LOADING });\r\n        RegisterUserService(credentials).then((res) => {\r\n            console.log(ares);\r\n            if (res.hasOwnProperty('success') && res.success === true) {\r\n                dispatch({ type: ActionTypes.SIGNUP_SUCCESS, res });\r\n            } else if (res.hasOwnProperty('success') && res.success === false) {\r\n                dispatch({ type: ActionTypes.SIGNUP_ERROR, res });\r\n            }\r\n        }, error => {\r\n            dispatch({ type: ActionTypes.CODE_ERROR, error })\r\n        })\r\n    }\r\n}\r\n\r\nexport const LoginAction = (credentials, history) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: ActionTypes.RESTART_AUTH_RESPONSE });\r\n        dispatch({ type: ActionTypes.LOADING });\r\n        LoginUserService(credentials).then((res) => {\r\n            if (res.hasOwnProperty('success') && res.success === true) {\r\n                localStorage.setItem('access-token', res.token)\r\n                dispatch({ type: ActionTypes.LOGIN_SUCCESS });\r\n                // history.push('/user');\r\n            } else if (res.hasOwnProperty('success') && res.success === false) {\r\n                dispatch({ type: ActionTypes.LOGIN_ERROR, res });\r\n            }\r\n        }, error => {\r\n            dispatch({ type: ActionTypes.CODE_ERROR, error })\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}